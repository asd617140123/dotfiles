# Misc
# ============================================================================

snippet     enc
abbr        # encoding: utf-8
options     head
  # encoding: utf-8

snippet     req
abbr        require '..'
options     head
  require '${0}'

snippet     reqr
abbr        require_relative '..'
options     head
  require_relative '${0}'

snippet     do
abbr        do .. end
  do
    ${1:TARGET}
  end

snippet     doa
abbr        do |arg| .. end
  do |${1:arg}|
    ${0:TARGET}
  end


# Control Structures
# ============================================================================

snippet     if
abbr        if .. end
options     head
  if ${1:condition}
    ${0:TARGET}
  end

snippet     ife
abbr        if .. else .. end
options     head
  if ${1:condition}
    ${2}
  else
    ${0}
  end

snippet     eif
abbr        elsif ..
options     head
  elsif ${1:condition}
    ${0}

snippet     un
abbr        unless .. end
options     head
  unless ${1:condition}
    ${0:TARGET}
  end

snippet     case
abbr        case .. end
options     head
  case ${1:object}
  when ${2:condition}
    ${0}
  end

snippet     when
abbr        when ..
options     head
  when ${1:condition}
    ${0:TARGET}

snippet     whent
abbr        when .. then
options     head
  when ${1:condition} then ${0:TARGET}


snippet     ea
abbr        each { .. }
options     word
  each { |${1:v}| ${0} }

snippet     ead
abbr        each do .. end
options     word
  each do |${1:v}|
    ${0}
  end

snippet     map
abbr        map { .. }
options     word
  map { |${1:v}| ${0} }

snippet     mapd
abbr        map do .. end
options     word
  map do |${1:v}|
    ${0}
  end

snippet     proc
abbr        proc { .. }
  proc { |${1:args}| ${0} }

snippet     lam
abbr        lambda { .. }
  lambda { |${1:args}| ${0} }

snippet     ->
abbr        -> { .. }
  -> { ${0} }

snippet     ->a
abbr        ->(args) { .. }
  ->(${1:args}) { ${0} }

# Methods
# ============================================================================

snippet     def
abbr        def method .. end
options     head
  def ${1:method_name}
    ${0:TARGET}
  end

snippet     deft
abbr        def test_.. end
options     head
  def test_${1:case_name}
    ${0:TARGET}
  end

snippet     defi
abbr        def initialize .. end
options     head
  def initialize(${1:args})
    ${0:TARGET}
  end

snippet     defs
abbr        def self.* .. end
options     head
  def self.${1:class_method_name}
    ${0:TARGET}
  end

# Objects
# ============================================================================

snippet     cl
abbr        class .. end
options     head
  class ${1:ClassName}
    ${0:TARGET}
  end

snippet     cli
abbr        class .. def initialize .. end
options     head
  class ${1:ClassName}
    def initialize(${2:args})
      ${0:TARGET}
    end
  end

snippet     cls
abbr        class << self .. end
options     head
  class << self
    ${0:TARGET}
  end

snippet     mod
abbr        module .. end
options     head
  module ${1:MyModule}
    ${0:TARGET}
  end


# Debugging
# ============================================================================

snippet     pry
abbr        binding.pry
options     head
  require 'pry'; binding.pry

snippet     puts
  puts '*' * 80
  p ${1:TARGET}
  puts '*' * 80
